{"version":3,"sources":["images/logo.svg","images/logo-bonus.svg","logic/game.js","images/icon-close.svg","components/menuIcon.js","components/menu.js","components/score.js","components/chooser.js","components/display.js","components/gameui.js","components/modal.js","components/rulesmodal.js","images/image-rules.svg","images/image-rules-bonus.svg","index.js"],"names":["choices","basic","spock","Object","freeze","names","modes","Game","mode","this","_mode","_choices","_players","id","name","score","choice","_winner","length","val","newMode","player","isValidPlayer","Math","floor","random","i","isValidChoice","p1","p2","modr","x","y","_allPlayersHavePicked","winner","_checkWinner","sessionStorage","clear","setItem","getItem","parseInt","MenuIcon","props","className","show","onClick","toggle","Menu","state","toggleShow","bind","setState","one","two","opponent","ties","settings","callback","htmlFor","value","onChange","e","target","map","data","index","src","closeIcon","alt","Component","defaultProps","Score","Chooser","style","itemClass","choose","messages","Display","game","wId","getPlayer","c1","getValue","c2","reset","GameUI","setChoice","steps","setup","newRound","render","setTimeout","setStep","randomChoice","setPlayerChoice","scoreGame","setScore","step","Modal","stopPropagation","children","rules","RulesModal","logo","basicLogo","spocklogo","App","loadGame","setting","includes","resetGame","saveGame","tie","document","title","getGameTitle","StrictMode","getGameTitles","React","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.eb1aadef.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.a4a2b39f.svg\";","export default __webpack_public_path__ + \"static/media/logo-bonus.9bf8aeb8.svg\";","// Possible game modes:\n//  elements: Water, Fire, Ice\n//  Kitsune-Ken: Hunter, Chief, Fox\n//  Halloween: Robot, Pirate, Ninja, Monkey, Zombie\n\nconst choices = {\n  basic: [\"scissors\", \"paper\", \"rock\"],\n  spock: [\"scissors\", \"paper\", \"rock\", \"lizard\", \"spock\"]\n};\nObject.freeze(choices);\n\nconst names = {\n  basic: \"Rock Paper Scissors\",\n  spock: \"Rock Paper Scissors Lizard Spock\"\n};\nObject.freeze(names);\n\nconst modes = [\"basic\", \"spock\"];\nObject.freeze(modes);\n\n// Improvement: Could have explinations for winning losing\n\n/**\n * Game class performs logic functions for the rock paper scissors game\n */\nclass Game {\n  constructor(mode=\"basic\") {\n    this._mode = mode;\n    this._choices = choices[this._mode];\n    this._players = [\n      { id: 0, name: \"Tie\", score: 0, choice: -1 },\n      { id: 1, name: \"You\", score: 0, choice: -1 },\n      { id: 2, name: \"The House\", score: 0, choice: -1}\n    ];\n    this._winner = null;\n  }\n\n  // Getters and Setters\n\n  /**\n   * Returns the string value of a given numeric choice\n   *  @returns {string} value of choice index\n   */\n  getValue(choice) {\n    return this._choices[choice];\n  }\n\n  /**\n   * Returns the total number of available choices\n   *  @returns {number} number of available choices\n   */\n  get choiceCount() {\n    return this._choices.length;\n  }\n\n  /**\n   * Returns the available choices\n   *  @returns {string[]} array of available choices\n   */\n  get choices() {\n    return this._choices;\n  }\n\n  /**\n   * Returns the current game mode\n   *  @returns {string} \"basic\" or \"spock\"\n   */\n  get mode() {\n    return this._mode;\n  }\n\n  /**\n   * Returns the list of allowed game modes\n   *  @returns {string[]}\n   */\n  get modes() {\n    return modes;\n  }\n\n  /**\n   * Sets the game mode and resets the game\n   *  @param {string} val - The mode to set: \"basic\" or \"spock\"\n   */\n  set mode(val) {\n    const newMode = choices[val];\n    if (newMode) {\n      this._mode = val;\n      this._choices = newMode;\n    }\n  }\n\n  /**\n   * Returns the name of the current game mode.\n   *  @returns {string}\n   */\n  getGameTitle() {\n    return names[this._mode];\n  }\n\n  /**\n   * Returns the names of all the game modes\n   *  @returns {string[]}\n   */\n  getGameTitles() {\n    return names;\n  }\n\n  /**\n   * Returns the player object for given player id\n   *  @param {number} player - the player id number\n   */\n  getPlayer(player) {\n    if (this.isValidPlayer(player)) {\n      return this._players[player];\n    }\n    return null;\n  }\n\n  /**\n   * Returns the number of ties in the current match\n   *  @returns {number}\n   */\n  get ties() {\n    return this._players[0].score;\n  }\n\n  /**\n   * Returns the winner of the current round\n   *  @returns {Object}\n   */\n  get winner() {\n    return this._winner;\n  }\n\n  // Helper functions\n\n  /**\n   * Returns a random value within the range of available choices\n   */\n  randomChoice() {\n    return Math.floor(Math.random() * this._choices.length);\n  }\n\n  /**\n   * Returns true if the given choice is valid\n   *  @param {number} choice - numeric index of choice\n   *  @returns {boolean}\n   */\n  isValidChoice(choice) {\n    return (choice >= 0 && choice < this._choices.length);\n  }\n\n  /**\n   * Returns true if the given player is valid\n   *  @param {number} player - numeric index of player\n   *  @returns {boolean}\n   */\n  isValidPlayer(player) {\n    // Player 0 is \"Tie\", so not a valid player\n    return (player > 0 && player < this._players.length);\n  }\n\n  /**\n   * Returns true if all players have picked a choice\n   *  @returns {boolean}\n   */\n  _allPlayersHavePicked() {\n    for (let i=1; i<this._players.length; i++) {\n      if (!this.isValidChoice(this._players[i].choice)) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Returns which player is the winner\n   *  @param {number} p1 numeric index of player one choice (0..n-1)\n   *  @param {number} p2 numeric index of player two choice (0..n-1)\n   *  @returns 0 if tie, 1 if player 1, 2 if player 2\n   */\n  _checkWinner(p1, p2) {\n    /*\n      Based on the win algorithm described in wikipedia article:\n      https://en.wikipedia.org/wiki/Rock_paper_scissors#Additional_weapons\n      The winning player is determined by subtracting the numeric value of\n      player two's choice from player one's, then taking the modulo remainder\n      modded by number of choices.\n      If the remainder is zero, there is a tie. If it is odd player one has\n      won. If it is even player two has won.\n      The choice array needs to be correctly ordered for the correct response.\n     */\n    const modr = (x, y) => (x + y) % y;\n    const x = p1 - p2;\n    return x && (modr(modr(x, this._choices.length), 2) + 1);\n  }\n\n  // Game State handling\n\n  /**\n   * Sets a given player's choice\n   *  @param {number} player - Player id\n   *  @param {number} choice - Choice id\n   */\n  setPlayerChoice(player, choice) {\n    if (this.isValidChoice(choice) && this.isValidPlayer(player)) {\n      this._players[player].choice = choice;\n    }\n  }\n\n  /**\n   * Scores the game and sets the winner\n   */\n  scoreGame() {\n    if (this._allPlayersHavePicked()) {\n      const winner = this._checkWinner(\n        this._players[1].choice,\n        this._players[2].choice\n      );\n      this._players[winner].score++;\n      this._winner = this._players[winner];\n    }\n  }\n\n  /**\n   * Sets game state to round start\n   */\n  newRound() {\n    for (let i=0; i<this._players.length; i++) {\n      this._players[i].choice = -1;\n    }\n    this._winner = null;\n  }\n\n  /**\n   * Resets the game\n   */\n  resetGame() {\n    for (let i=0; i<this._players.length; i++) {\n      this._players[i].choice = -1;\n      this._players[i].score = 0;\n    }\n    this._winner = null;\n    sessionStorage.clear();\n  }\n\n  /**\n   * Stores the current game state to session storage\n   */\n  saveGame() {\n    sessionStorage.setItem('game_saved', 'true');\n    sessionStorage.setItem('game_mode', this._mode);\n    for (let i = 0; i < this._players.length; i++) {\n      sessionStorage.setItem(`player${i}`, this._players[i].score);\n    }\n  }\n\n  /**\n   * Loads the game state from session storage\n   */\n  loadGame() {\n    this.mode = sessionStorage.getItem('game_mode') || 'basic';\n    this._choices = choices[this._mode];\n    for (let i = 0; i < this._players.length; i++) {\n      this._players[i].score = parseInt(sessionStorage.getItem(`player${i}`) || 0);\n    }\n  }\n}\n\nexport default Game;\n","export default __webpack_public_path__ + \"static/media/icon-close.bde602ec.svg\";","import './menuIcon.css';\n\nfunction MenuIcon(props) {\n  return (\n    <button className={`menu-icon ${props.show && 'open'}`}\n      onClick={props.toggle} >\n\n      <span/>\n      <span/>\n      <span/>\n    </button>\n  );\n}\n\nexport default MenuIcon;\n","import React, { Component, Fragment } from 'react';\n\nimport './menu.css';\nimport closeIcon from '../images/icon-close.svg';\n\nimport MenuIcon from './menuIcon.js';\n\nclass Menu extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { show: this.props.show };\n    this.toggleShow = this.toggleShow.bind(this);\n  }\n\n  toggleShow() {\n    this.setState((state, props)=>({\n      show: !state.show\n    }));\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <MenuIcon show={this.state.show} toggle={this.toggleShow} />\n\n        <div className={this.state.show ? \"menu-dialog show\" : \"menu-dialog\"}>\n          <div className=\"menu-wrapper\">\n            <h2>Current Game</h2>\n            <div>\n              {this.props.player.one} -vs- {this.props.player.two}\n            </div>\n            <ul className=\"score-list\">\n              <li>Wins: {this.props.score.player}</li>\n              <li>Loses: {this.props.score.opponent}</li>\n              <li>Ties: {this.props.score.ties}</li>\n            </ul>\n\n            <button className=\"menu-button\"\n              onClick={()=>this.props.settings.callback(\"reset\", true)}>\n              Restart Game\n            </button>\n\n            <h2>Settings</h2>\n            <label htmlFor=\"gameModes\">Game : </label>\n            <select className=\"game-mode\" name=\"gameModes\" value={this.props.settings.mode}\n              onChange={(e)=>this.props.settings.callback(\"mode\", e.target.value)}>\n\n              {this.props.settings.modes.map((data, index)=>(\n                <option key={index} value={data}>\n                  {this.props.settings.names[data]}\n                </option>\n              ))}\n            </select>\n\n            <button className=\"menu-close\" onClick={this.toggleShow}>\n              <img src={closeIcon} alt=\"Close\" />\n            </button>\n          </div>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nMenu.defaultProps = {\n  show: false\n}\n\nexport default Menu\n","import './score.css';\n\nfunction Score(props) {\n  return (\n    <div className=\"score-panel\">\n      <p className=\"score-title\"> Score </p>\n      <p className=\"score-display\"> {props.score.player || 0} </p>\n    </div>\n  );\n}\n\nexport default Score;\n","import './badges.css';\nimport './chooser.css';\n\nfunction Chooser(props) {\n  return (\n    <div className={`chooser ${props.className}`}>\n      <div className=\"circle\" />\n      <ul className=\"\" style={{\"--n\":props.choices.length }}>\n        {props.choices.map((data, index)=>(\n          <li key={index} style={{\"--i\":index}}>\n            <button\n              className={`${props.itemClass} ${data}`}\n              onClick={()=>props.choose(props.player, index)}>\n              {data}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Chooser;\n","import './display.css';\nimport './badges.css';\n\nconst messages = [\"Tied\", \"Win\", \"Lose\"];\n\nfunction Display(props) {\n  const game = props.game;\n  const winner = game.winner;\n  const wId = (winner) ? winner.id : 0;\n  const p1 = game.getPlayer(1);\n  const p2 = game.getPlayer(2);\n  const c1 = (p1.choice >= 0) ? game.getValue(p1.choice) : \"empty\";\n  const c2 = (p2.choice >= 0) ? game.getValue(p2.choice) : \"empty\";\n\n  return (\n    <div className=\"display\">\n      <div className=\"player one\">\n        <div className=\"player-container\">\n          <div className={`badge-container ${(wId === 1) && 'won'}`}>\n            <div className={`badge ${c1}`}>\n              {c1}\n            </div>\n          </div>\n          <p className=\"name\">{p1.name} picked</p>\n        </div>\n      </div>\n      <div className=\"player two\">\n        <div className=\"player-container\">\n          <div className={`badge-container ${(wId === 2) && 'won'}`}>\n            <div className={`badge ${c2}`}>\n              {c2}\n            </div>\n          </div>\n          <p className=\"name\">{p2.name} picked</p>\n        </div>\n      </div>\n\n      {winner && (\n        <div className=\"winner-box\">\n          <h2>You {messages[winner.id]}</h2>\n          <button onClick={props.reset}>\n            Play Again\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Display;\n","import React, { Component } from 'react';\n\nimport Chooser from './chooser.js';\nimport Display from './display.js';\n\nclass GameUI extends Component {\n  constructor(props) {\n    super(props);\n    this.setChoice = this.setChoice.bind(this);\n    this.steps = [\n      {\n        setup: ()=>this.props.game.newRound(),\n        render: ()=>(\n          <Chooser choices={this.props.game.choices}\n                    player={1} choose={this.setChoice}\n                    className={this.props.game.mode}\n                    itemClass=\"badge\" />\n        )\n      },\n      {\n        setup: ()=>setTimeout(()=>this.setStep(2), 1000),\n        render: ()=><Display game={this.props.game} />\n      },\n      {\n        setup: ()=>{\n          const choice = this.props.game.randomChoice();\n          this.props.game.setPlayerChoice(2, choice);\n          setTimeout(()=>this.setStep(3), 1000);\n        },\n        render: ()=><Display game={this.props.game} />\n      },\n      {\n        setup: ()=>{\n          this.props.game.scoreGame();\n          this.props.setScore(\n            this.props.game.getPlayer(1).score,   // Player 1 win count\n            this.props.game.getPlayer(2).score,   // Player 2 win count\n            this.props.game.ties                  // Number of ties\n          );\n        },\n        render: ()=><Display game={this.props.game} reset={()=>this.setStep(0)} />\n      }\n    ];\n  }\n\n  // ToDo: Save and recover state on mount/unmount\n\n  setStep(step) {\n    this.steps[step].setup();\n    this.props.settings(\"step\", step);\n  }\n\n  setChoice(player, choice) {\n    this.props.game.setPlayerChoice(player, choice);\n    this.setStep(this.props.step + 1);\n  }\n\n  render() {\n    return this.steps[this.props.step].render();\n  }\n}\n\nexport default GameUI;\n","import React, { Fragment } from 'react';\nimport './modal.css';\n\nfunction Modal(props) {\n  return (\n    <Fragment>\n      {\n        props.show && (\n          <div className=\"modal-wrapper\" onClick={props.toggle}>\n            <div className=\"modal-dialog\" onClick={(e)=>e.stopPropagation()}>\n              {props.children}\n            </div>\n          </div>\n        )\n      }\n    </Fragment>\n  );\n}\n\nexport default Modal;\n","import React, { Component, Fragment } from 'react';\n\nimport Modal from './modal.js';\n\nimport './rulesmodal.css';\nimport closeIcon from '../images/icon-close.svg';\nimport basicRules from '../images/image-rules.svg';\nimport spockRules from '../images/image-rules-bonus.svg';\n\nconst rules = {basic: basicRules, spock: spockRules};\n\nclass RulesModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { show: this.props.show };\n    this.toggleShow = this.toggleShow.bind(this);\n  }\n\n  toggleShow() {\n    this.setState((state, props)=>({\n      show: !state.show\n    }));\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <button className=\"modal-trigger\" onClick={this.toggleShow}>\n          Rules\n        </button>\n        <Modal show={this.state.show} toggle={this.toggleShow}>\n          <h2 className=\"rules-title\">Rules</h2>\n          <img\n            className=\"rules-image\"\n            src={rules[this.props.rules]}\n            alt=\"Paper beats Rock beats Scissors beats Paper\"\n          />\n          <button className=\"rules-close\" onClick={this.toggleShow}>\n            <img src={closeIcon} alt=\"Close\" />\n          </button>\n        </Modal>\n      </Fragment>\n    );\n  }\n}\n\nRulesModal.defaultProps = {\n  show: false,\n  rules: \"basic\"\n}\n\nexport default RulesModal;\n","export default __webpack_public_path__ + \"static/media/image-rules.258b753f.svg\";","export default __webpack_public_path__ + \"static/media/image-rules-bonus.513320fb.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport './header.css';\n\nimport basicLogo from './images/logo.svg';\nimport spocklogo from './images/logo-bonus.svg';\n\nimport Game from './logic/game.js';\n\nimport Menu from './components/menu.js';\nimport Score from './components/score.js';\nimport GameUI from './components/gameui.js';\nimport RulesModal from './components/rulesmodal.js';\n\nconst logo = {basic: basicLogo, spock: spocklogo};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.game = new Game();\n    this.game.loadGame();\n\n    this.state = {\n      mode: this.game.mode,\n      step: 0,\n      score: this.game.getPlayer(1).score,\n      opponent: this.game.getPlayer(2).score,\n      ties: this.game.ties\n    };\n    this.settings = this.settings.bind(this);\n    this.setScore = this.setScore.bind(this);\n  }\n\n  settings(setting, value) {\n    switch (setting) {\n      case \"step\":\n        this.setState({step: value});\n        break;\n      case \"mode\":\n        if (this.game.modes.includes(value)) {\n          this.game.mode = value;\n          this.game.resetGame();\n          this.setState({\n            step: 0,\n            score: 0,\n            opponent: 0,\n            ties: 0,\n            mode: this.game.mode\n          });\n        }\n        break;\n      case \"reset\":\n        this.game.resetGame();\n        this.setState({\n          step: 0,\n          score: 0,\n          opponent: 0,\n          ties: 0\n        });\n        break;\n      default:\n        break;\n    }\n    this.game.saveGame();\n  }\n\n  setScore(score, opponent=0, tie=0) {\n    this.game.saveGame();\n    this.setState({\n      score: score,\n      opponent: opponent,\n      ties: tie\n    });\n  }\n\n  render() {\n    const score = {\n      player: this.state.score,\n      opponent: this.state.opponent,\n      ties: this.state.ties\n    }\n    document.title = this.game.getGameTitle();\n    return (\n      <React.StrictMode>\n        <header>\n          <div className=\"col title\">\n            <img className=\"title-img\"\n              src={logo[this.state.mode]}\n              alt={this.game.getGameTitle()} />\n          </div>\n          <div className=\"col menu\">\n            <Menu\n              score={score}\n              player={{\n                one: this.game.getPlayer(1).name,\n                two: this.game.getPlayer(2).name\n              }}\n              settings={{\n                mode: this.game.mode,\n                modes: this.game.modes,\n                names: this.game.getGameTitles(),\n                callback: this.settings\n              }} />\n          </div>\n          <div className=\"col score\">\n            <Score\n              score={score} />\n          </div>\n        </header>\n\n        <section className=\"gamePanel\">\n          <GameUI\n            game={this.game}\n            step={this.state.step}\n            settings={this.settings}\n            setScore={this.setScore} />\n        </section>\n\n        <footer>\n          <RulesModal show={false} rules={this.state.mode}/>\n        </footer>\n      </React.StrictMode>\n    );\n  }\n}\n\nReactDOM.render(<App />,document.getElementById('root'));\n"],"sourceRoot":""}